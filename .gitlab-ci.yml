default:
  image:
      name: "tokend/werf:0.0.15"
      entrypoint: [""]
  services:
        - name: docker:dind
          alias: docker
          # in our experience although you'd assume this would be sufficient, this did 
          # nothing to prevent connection errors without `DOCKER_TLS_CERTDIR` being set 
          # to an empty string, and I would call that beyond mildly infuriating.
          command: ["--tls=false"]
  tags:
    - "tokend"


variables:
  DOCKER_DRIVER: overlay2
  DOCKER_HOST: tcp://docker:2375
  DOCKER_TLS_CERTDIR: ""
  DOMAIN: rarime.com
  GITHUB_REF: $CI_COMMIT_SHA
  DH_IMAGE_NAME: $CI_PROJECT_ROOT_NAMESPACE/$CI_PROJECT_NAME
  SERVICE: $CI_PROJECT_NAME
  REGISTRY: registry.gitlab.com/$CI_PROJECT_NAMESPACE/$CI_PROJECT_NAME
  IMAGE_NAME: $REGISTRY:$CI_COMMIT_SHA
  WERF_LOG_COLOR_MODE: "on"
  WERF_IMAGES_REPO: $CI_REGISTRY_IMAGE
  WERF_BUILDAH_MODE: auto
  WERF_ENABLE_PROCESS_EXTERMINATOR: 1


.before_script_template: &before_script_templ
  before_script:
    - werf version
    - docker version
    - echo $CI_REGISTRY

stages:
  - build-and-publish
  - deploy
  - cleanup

Build and Publish:
  stage: build-and-publish
  only:
    refs:
      - development
  <<: *before_script_templ
  script:
    - . $(werf ci-env gitlab --as-file)
    - werf export web --tag $IMAGE_NAME
  except: [schedules]
  interruptible: true

Build and Publish Tag:
  stage: build-and-publish
  only:
    refs:
      - tags
      - main
  <<: *before_script_templ
  script:
    - . $(werf ci-env gitlab --as-file)
    - werf export web --tag $IMAGE_NAME_TAG
  except: [schedules]
  interruptible: true

Deploy to Staging:
  image: dtzar/helm-kubectl:latest
  stage: deploy
  only:
    refs:
      - development
  script:
    - mkdir ~/.kube/
    - echo ${kuberconfig} | base64 -d > config
    - mv config ~/.kube/
    - helm upgrade -i --kubeconfig ~/.kube/config "webclient" ".helm" --set
      global.IngressDomain=staging.${DOMAIN} --set
      "image.repository=${REGISTRY}" --set "image.tag=${CI_COMMIT_SHA}"
      --create-namespace --namespace $CI_PROJECT_NAME-stage-rarime
  interruptible: true

Deploy to Production:
  image: dtzar/helm-kubectl:latest
  stage: deploy
  script:
    - mkdir ~/.kube/
    - echo ${kuberconfig} | base64 -d > config
    - mv config ~/.kube/
    - helm upgrade -i --kubeconfig ~/.kube/config "webclient" ".helm" --set
      global.IngressDomain=${DOMAIN} --set "image.repository=${REGISTRY}" --set
      "image.tag=${CI_COMMIT_SHA}" --create-namespace --namespace
      $CI_PROJECT_NAME-prod-rarime
  when: manual
  interruptible: true
  only:
    refs:
      - main

Cleanup:
  stage: cleanup
  <<: *before_script_templ
  script:
    - type multiwerf && . $(multiwerf use 1.1 stable --as-file)
    - type werf && source $(werf ci-env gitlab --as-file)
    - docker login -u nobody -p ${WERF_IMAGES_CLEANUP_PASSWORD}
      ${WERF_IMAGES_REPO}
    - werf cleanup --dev
  only: [schedules]
  interruptible: true
